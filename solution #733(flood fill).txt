class Solution {
public:
    void dfs(int i, int j, vector<vector<int>>& image, vector<vector<int>>& vis, int oldColour, int n, int m, int newColour) {
        if( i<0 || j<0|| i>=n || j>=m)
            return;
        if(vis[i][j] || image[i][j] != oldColour)
            return;
        vis[i][j] = 1;
        image[i][j] = newColour;
        dfs(i+1,j, image, vis,oldColour, n, m, newColour);
        dfs(i-1,j, image, vis, oldColour, n, m, newColour);
        dfs(i,j-1, image, vis, oldColour, n, m, newColour);
        dfs(i,j+1, image, vis, oldColour, n, m, newColour);
        
    }
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int oldColour = image[sr][sc], n = image.size(), m = image[0].size();
        vector<vector<int> > vis(n, vector<int>(m ,0) );
        dfs(sr, sc, image, vis, oldColour, n, m, newColor);
        return image;
    }
};