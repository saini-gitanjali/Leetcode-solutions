class Solution {
public:
    void dfs( int src, vector<int> graph[],vector<int> &vis)
    {
        if(vis[src]) return;
        vis[src] = 1;
        for(auto x : graph[src])
            dfs(x, graph, vis);
        

    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        int m = connections.size();
        vector<int> graph[n];
        vector<int> vis(n, 0);
        if(m < n-1) return -1;
        
        for(int i=0; i<connections.size(); i++)
        {
            graph[connections[i][0]].push_back(connections[i][1]);
            graph[connections[i][1]].push_back(connections[i][0]);
        }
        
        int count = 0;
        for(int i=0; i<n; i++)
        {
            if(!vis[i])
            {
                dfs(i, graph, vis);
                count++;
            }
        }
        return count-1;
    }
};