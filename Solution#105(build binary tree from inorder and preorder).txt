/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int idx = 0;
    int search( vector<int>& inorder, int start, int end, int curr){
        for(int i=0; i<inorder.size(); i++)
        {
            if(inorder[i] == curr)
                return i;
        }
    return -1;
}
    
    TreeNode *build(vector<int>& preorder, vector<int>& inorder, int start, int end)    //start and end of inorder array
    {
        if(start > end)
            return NULL;
        
        int curr = preorder[idx];
        idx++;
        TreeNode *node = new TreeNode(curr);
        int pos = search(inorder, start, end, curr); // to find position of curr in inorder array
        
        if(start == end)
            return node;
        node->left = build(preorder , inorder, start, pos-1);
        node->right = build(preorder, inorder, pos+1, end);
        
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode *node = new TreeNode(preorder[0]);
        if(preorder.size()==1)
            return node;
        return build(preorder, inorder, 0, preorder.size()-1);
    }
};