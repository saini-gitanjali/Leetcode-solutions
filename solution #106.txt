/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int len1 = 0, len2 = 0;
        ListNode *l1 = headA, *l2 = headB;
        while(l1 || l2) {
            if(l1){
                l1= l1->next;
                len1++;
            }
            if(l2) {
                l2 = l2->next;
                len2++;
            }
        }
        l1 = headA;
        l2 = headB;
        int diff = abs(len2 - len1);
        
        if(len2 > len1)
            while(diff){
                l2 = l2->next;
                diff--;
            }
        else
            while(diff) {
                l1 = l1->next;
                diff--;
            }
        
        // cout<<l1->val<<" "<<l2->val;
        while(l1 && l2)
        {
            if(l1 == l2)
                return l1;
            else{
                l1 = l1->next;
                l2 = l2->next;
            }
        }
        // cout<<len1<<" "<<len2;
        return NULL;
    }
};