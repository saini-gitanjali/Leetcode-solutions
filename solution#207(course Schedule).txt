class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> indegree(numCourses, 0);
        vector<vector<int> > graph(numCourses);
        int visited = 0;
        for(int i=0; i<prerequisites.size(); i++) {
            graph[prerequisites[i][1]].push_back(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }
        // for(int i=0; i<numCourses; i++)
        //     cout<<i<<" : "<<indegree[i]<<" ";
        // cout<<endl;
        queue<int> q;
        for(int i=0; i<numCourses; i++){
            // cout<<indegree[i]<<" ";
            if(indegree[i] == 0){
                q.push(i);
            
            }
        }
        while (!q.empty()){
            int front = q.front();
            q.pop();
            visited++;
            for(auto x : graph[front])
            {
                indegree[x]--;
                if(indegree[x]==0)
                    q.push(x);
            }
        }
        if(visited==numCourses)
            return true;
        
        return false;
    }
};