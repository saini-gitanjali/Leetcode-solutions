/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool equals(TreeNode *a, TreeNode *b){
        if(!a && !b)
            return true;
        else if(!a || !b)
            return false;
        if(a->val != b->val)
            return false;
        return true;
        
        }
   
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p && !q)
            return true;
        queue<TreeNode*> q1;
        queue<TreeNode*>q2;
        q1.push(p);
        q2.push(q);
        while(!q1.empty() && !q2.empty()) {
            TreeNode *curr1, *curr2;
            curr1 = q1.front();
            curr2 = q2.front();
            q1.pop();
            q2.pop();
            
            if(!equals(curr1,curr2))
                return false;
           
            if(!equals(curr1->left, curr2->left))
               return false;
            else if(curr1->left){
               q1.push(curr1->left);
               q2.push(curr2->left);
            }
               
            if(!equals(curr1->right, curr2->right))
                return false;
            else if(curr2->right){
               q1.push(curr1->right);
               q2.push(curr2->right);
            }
            
        }
        return true;       
    }
};